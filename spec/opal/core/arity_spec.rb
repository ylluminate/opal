# This spec has been copied over from rubyspec and modified to avoid the use
# of instance_eval with a String argument and also because some syntaxes are
# not suppoted yet by Opal (e.g. def a(b, *c, d)).

require 'spec_helper'

describe "UnboundMethod#arity" do
  context "returns zero" do

    def self.evaluate_in_module message, &block
      it message do
        Module.new do
          def self.arity_of(method_name)
            instance_method(method_name).arity
          end
        end.class_eval(&block)
      end
    end

    evaluate_in_module "for m()" do
      arity_of(def m() end).should == 0
    end

    evaluate_in_module "for n(&b)" do
      arity_of(def n(&b) end).should == 0
    end
  end

  context "returns positive values," do
    evaluate_in_module "the number of args for simple args" do
      arity_of(def m(a) end).should == 1
      arity_of(def n(a, b) end).should == 2
      arity_of(def o(a, b, c) end).should == 3
      arity_of(def p(a, b, c, d) end).should == 4
    end

    ruby_version_is "2.1" do
      evaluate_in_module "1 for kwargs" do
        arity_of(def m(a:) end).should == 1
        arity_of(def n(a:, b:) end).should == 1
        arity_of(def o(a: 1, b:, c:, d: 2) end).should == 1
      end

      evaluate_in_module __LINE__ do
        arity_of(def m(a, b:) end).should == 2
        arity_of(def n(a, b:, &l) end).should == 2
      end

      evaluate_in_module __LINE__ do
        arity_of(def m(a, b, c:, d: 1) end).should == 3
        arity_of(def n(a, b, c:, d: 1, **k, &l) end).should == 3
      end
    end
  end

  context "returns negative values" do
    # evaluate_in_module __LINE__ do
    #   arity_of(def m(a=1) end).should == -1
    #   arity_of(def n(a=1, b=2) end).should == -1
    # end
    #
    # evaluate_in_module __LINE__ do
    #   arity_of(def m(a, b=1) end).should == -2
    #   arity_of(def n(a, b, c=1, d=2) end).should == -3
    # end
    #
    # evaluate_in_module __LINE__ do
    #   arity_of(def m(a=1, *b) end).should == -1
    #   arity_of(def n(a=1, b=2, *c) end).should == -1
    # end
    #
    # evaluate_in_module __LINE__ do
    #   arity_of(def m(*) end).should == -1
    #   arity_of(def n(*a) end).should == -1
    # end
    #
    # evaluate_in_module __LINE__ do
    #   arity_of(def m(a, *) end).should == -2
    #   arity_of(def n(a, *b) end).should == -2
    #   arity_of(def o(a, b, *c) end).should == -3
    #   arity_of(def p(a, b, c, *d) end).should == -4
    # end
    #
    # evaluate_in_module __LINE__ do
    #   arity_of(def m(*a, b) end).should == -2
    #   arity_of(def n(*a, b, c) end).should == -3
    #   arity_of(def o(*a, b, c, d) end).should == -4
    # end
    #
    # evaluate_in_module __LINE__ do
    #   arity_of(def m(a, *b, c) end).should == -3
    #   arity_of(def n(a, b, *c, d, e) end).should == -5
    # end
    #
    # evaluate_in_module __LINE__ do
    #   arity_of(def m(a, b=1, c=2, *d, e, f) end).should == -4
    #   arity_of(def n(a, b, c=1, *d, e, f, g) end).should == -6
    # end

    # ruby_version_is "2.1" do
    #   evaluate_in_module __LINE__ do
    #     arity_of(def m(a: 1) end).should == -1
    #     arity_of(def n(a: 1, b: 2) end).should == -1
    #   end
    # end
    #
    # evaluate_in_module __LINE__ do
    #   arity_of(def m(a=1, b: 2) end).should == -1
    #   # arity_of(def n(*a, b: 1) end).should == -1
    #   arity_of(def o(a=1, b: 2) end).should == -1
    #   # arity_of(def p(a=1, *b, c: 2, &l) end).should == -1
    # end

    ruby_version_is "2.1" do
      # evaluate_in_module __LINE__ do
      #   arity_of(def m(**k, &l) end).should == -1
      #   arity_of(def n(*a, **k) end).should == -1
      #   arity_of(def o(a: 1, b: 2, **k) end).should == -1
      # end
      #
      # evaluate_in_module __LINE__ do
      #   arity_of(def m(a=1, *b, c:, d: 2, **k, &l) end).should == -2
      # end
      #
      # evaluate_in_module __LINE__ do
      #   arity_of(def m(a, b=1, *c, d, e:, f: 2, **k, &l) end).should == -4
      #   arity_of(def n(a, b=1, *c, d:, e:, f: 2, **k, &l) end).should == -3
      #   arity_of(def o(a=0, b=1, *c, d, e:, f: 2, **k, &l) end).should == -3
      #   arity_of(def p(a=0, b=1, *c, d:, e:, f: 2, **k, &l) end).should == -2
      # end
    end
  end

  # context "for a Method generated by respond_to_missing?" do
  #   it "returns -1" do
  #     obj = mock("method arity respond_to_missing")
  #     obj.should_receive(:respond_to_missing?).and_return(true)
  #
  #     obj.method(:m).unbind.arity.should == -1
  #   end
  # end
end
