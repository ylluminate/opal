opal_filter "language (opal)" do
  fails "A block allows for a leading space before the arguments"
  fails "A block taking nested |a, ((b, c), d)| assigns nil to the arguments when yielded no values"
  fails "A block taking nested |a, ((b, c), d)| destructures a single multi-level Array value yielded"
  fails "A block taking nested |a, ((b, c), d)| destructures separate yielded values"
  fails "A block taking nested |a, (b, (c, d))| assigns nil to the arguments when yielded no values"
  fails "A block taking nested |a, (b, (c, d))| destructures a single multi-level Array value yielded"
  fails "A block taking nested |a, (b, (c, d))| destructures separate yielded values"
  fails "A block taking |(a, b), c| arguments assigns nil to the arguments when yielded no values"
  fails "A block taking |(a, b), c| arguments calls #to_ary to convert a single yielded object to an Array"
  fails "A block taking |(a, b), c| arguments destructures a single one-level Array value yielded"
  fails "A block taking |(a, b), c| arguments does not call #to_ary if the object does not respond to #to_ary"
  fails "A block taking |(a, b), c| arguments does not call #to_ary if the single yielded object is an Array"
  fails "A block taking |(a, b), c| arguments raises an TypeError if #to_ary does not return an Array"
  fails "A block taking |(a, b)| arguments calls #to_ary to convert a single yielded object to an Array"
  fails "A block taking |(a, b)| arguments raises an TypeError if #to_ary does not return an Array"
  fails "A block taking |*| arguments does not call #to_ary if the object does not respond to #to_ary"
  fails "A block taking |*| arguments does not raise an exception when no values are yielded"
  fails "A block taking |*| arguments does not raise an exception when values are yielded"
  fails "A block taking |a, *b| arguments calls #to_ary to convert a single yielded object to an Array"
  fails "A block taking |a, *b| arguments raises an TypeError if #to_ary does not return an Array"
  fails "A block taking |a, b| arguments calls #to_ary to convert a single yielded object to an Array"
  fails "A block taking |a, b| arguments raises an TypeError if #to_ary does not return an Array"
  fails "A block taking |a, | arguments assgins the argument a single value yielded"
  fails "A block taking |a, | arguments assigns nil to the argument when no values are yielded"
  fails "A block taking |a, | arguments assigns nil to the argument when passed an empty Array"
  fails "A block taking |a, | arguments assigns the argument the first element of the Array when passed a single Array"
  fails "A block taking |a, | arguments assigns the argument the first of several values yielded when it is an Array"
  fails "A block taking |a, | arguments assigns the argument the first value yielded"
  fails "A block taking |a, | arguments calls #to_ary to convert a single yielded object to an Array"
  fails "A block taking |a, | arguments does not call #to_ary if the object does not respond to #to_ary"
  fails "A block taking |a, | arguments does not call #to_ary if the single yielded object is an Array"
  fails "A block taking |a, | arguments raises an TypeError if #to_ary does not return an Array"
  fails "A Proc taking zero arguments raises an ArgumentErro if a value is passed"
  fails "A Proc taking |(a, b)| arguments calls #to_ary to convert a single passed object to an Array"
  fails "A Proc taking |(a, b)| arguments destructures a single Array value yielded"
  fails "A Proc taking |(a, b)| arguments raises an ArgumentError when passed no values"
  fails "A Proc taking |(a, b)| arguments raises an TypeError if #to_ary does not return an Array"
  fails "A Proc taking |*| arguments does not call #to_ary to convert a single passed object to an Array"
  fails "A Proc taking |*| arguments does not raise an exception when passed multiple values"
  fails "A Proc taking |*| arguments does not raise an exception when passed no values"
  fails "A Proc taking |a, *b| arguments raises an ArgumentError if passed no values"
  fails "A Proc taking |a, b| arguments does not call #to_ary to convert a single passed object to an Array"
  fails "A Proc taking |a, b| arguments raises an ArgumentError if passed no values"
  fails "A Proc taking |a, b| arguments raises an ArgumentError if passed one value"
  fails "A Proc taking |a, | arguments assigns the argument the value passed"
  fails "A Proc taking |a, | arguments does not call #to_ary to convert a single passed object to an Array"
  fails "A Proc taking |a, | arguments does not destructure when passed a single Array"
  fails "A Proc taking |a, | arguments raises an ArgumentError when passed more than one value"
  fails "A Proc taking |a, | arguments raises an ArgumentError when passed no values"
  fails "A Proc taking |a| arguments raises an ArgumentError if no value is passed"
  fails "A Proc taking || arguments raises an ArgumentError if a value is passed"
  fails "An instance method with keyword arguments when there is a single keyword argument raises an argument error when an unknown keyword argument is provided"
  fails "Assigning multiple values allows complex parallel assignment"
  fails "Assigning multiple values calls #to_ary on RHS arg if the corresponding LHS var is a splat"
  fails "Assigning multiple values returns the rhs values used for assignment as an array"
  fails "Basic multiple assignment with a single RHS value does not call #to_a on an Array subclass instance"
  fails "Basic multiple assignment with a single RHS value does not call #to_ary on an Array subclass instance"
  fails "Basic multiple assignment with a splatted single RHS value does not call #to_a on an Array instance"
  fails "Basic multiple assignment with a splatted single RHS value does not call #to_a on an Array subclass instance"
  fails "Conditional operator assignment 'obj.meth op= expr' may not assign at all, depending on the truthiness of lhs"
  fails "Conditional operator assignment 'obj[idx] op= expr' is equivalent to 'obj[idx] op obj[idx] = expr'"
  fails "Conditional operator assignment 'obj[idx] op= expr' may not assign at all, depending on the truthiness of lhs"
  fails "Conditional operator assignment 'obj[idx] op= expr' uses short-circuit arg evaluation"
  fails "Conditional operator assignment 'var op= expr' may not assign at all, depending on the truthiness of lhs"
  fails "Invoking a method raises a SyntaxError with both a literal block and an object as block"
  fails "Invoking a method with an object as a block uses 'to_proc' for coercion"
  fails "Invoking a method with manditory and optional arguments raises an ArgumentError if too many values are passed"
  fails "Invoking a method with optional arguments raises ArgumentError if extra arguments are passed"
  fails "Invoking a private getter method does not permit self as a receiver"
  fails "Module#const_defined? should not search parent scopes of classes and modules if inherit is false"
  fails "Module#const_get should not search parent scopes of classes and modules if inherit is false"
  fails "Module#method_defined? converts the given name to a string using to_str"
  fails "Module#method_defined? raises a TypeError when the given object is not a string/symbol/fixnum"
  fails "Module#method_defined? returns true if a public or private method with the given name is defined in self, self's ancestors or one of self's included modules"
  fails "Multiple assignment has the proper return value"
  fails "Multiple assignment, array-style returns an array of all rhs values"
  fails "Multiple assignments with grouping A group on the lhs is considered one position and treats its corresponding rhs position like an Array"
  fails "Multiple assignments with grouping supports multiple levels of nested groupings"
  fails "Operator assignment 'obj[idx] op= expr' handles complex index (idx) arguments"
  fails "Operator assignment 'obj[idx] op= expr' handles empty index (idx) arguments"
  fails "Operator assignment 'obj[idx] op= expr' handles empty splat index (idx) arguments"
  fails "Operator assignment 'obj[idx] op= expr' handles multiple splat index (idx) arguments"
  fails "Operator assignment 'obj[idx] op= expr' handles single splat index (idx) arguments"
  fails "Operator assignment 'obj[idx] op= expr' handles splat index (idx) arguments with normal arguments"
  fails "Operator assignment 'obj[idx] op= expr' returns result of rhs not result of []="
  fails "Unconditional operator assignment 'obj[idx] op= expr' is equivalent to 'obj[idx] = obj[idx] op expr'"
end
