opal_filter "Numeric" do
  fails "Numeric#remainder returns the result of calling self#% with other - other if self is greater than 0 and other is less than 0"
  fails "Numeric#remainder returns the result of calling self#% with other - other if self is less than 0 and other is greater than 0"
  fails "Numeric#remainder returns the result of calling self#% with other if self and other are greater than 0"
  fails "Numeric#remainder returns the result of calling self#% with other if self and other are less than 0"
  fails "Numeric#remainder returns the result of calling self#% with other if self is 0"
  fails "Numeric#singleton_method_added raises a TypeError when trying to define a singleton method on a Numeric"
  fails "Numeric#step Numeric#step with [-infinity, -step] does not yield when self is -infinity"
  fails "Numeric#step Numeric#step with [-infinity, step] does not yield when self is -infinity"
  fails "Numeric#step Numeric#step with [infinity, -step] does not yield when self is -infinity"
  fails "Numeric#step Numeric#step with [infinity, -step] does not yield when self is +infinity"
  fails "Numeric#step Numeric#step with [infinity, step] does not yield when self is infinity"
  fails "Numeric#step Numeric#step with [stop, -infinity] does not yield when stop is Infinity"
  fails "Numeric#step Numeric#step with [stop, -step] when self, stop or step is a Float is careful about not yielding a value smaller than limit"
  fails "Numeric#step Numeric#step with [stop, +Infinity] does not yield when stop is -Infinity"
  fails "Numeric#step Numeric#step with [stop, +step] when self, stop or step is a Float is careful about not yielding a value greater than limit"
  fails "Numeric#step Numeric#step with [stop, step] when self and stop are Fixnums but step is a String raises an ArgumentError if given a block"
  fails "Numeric#step when no block is given returned Enumerator size raises an ArgumentError when step is 0"
  fails "Numeric#step when no block is given returned Enumerator size raises an ArgumentError when step is 0.0"
  fails "Numeric#step when no block is given returned Enumerator size when self, stop and step are Fixnums and step is negative returns 0 if value < limit"
  fails "Numeric#step when no block is given returned Enumerator size when self, stop and step are Fixnums and step is negative returns the difference between self and stop divided by the number of steps"
  fails "Numeric#step when no block is given returned Enumerator size when self, stop and step are Fixnums and step is positive returns 0 if value > limit"
  fails "Numeric#step when no block is given returned Enumerator size when self, stop and step are Fixnums and step is positive returns the difference between self and stop divided by the number of steps"
  fails "Numeric#step when no block is given returned Enumerator size when self, stop or step is a Float and step is negative returns 0 if value < limit"
  fails "Numeric#step when no block is given returned Enumerator size when self, stop or step is a Float and step is negative returns 1 if step is Float::INFINITY"
  fails "Numeric#step when no block is given returned Enumerator size when self, stop or step is a Float and step is negative returns the difference between self and stop divided by the number of steps"
  fails "Numeric#step when no block is given returned Enumerator size when self, stop or step is a Float and step is positive returns 0 if value > limit"
  fails "Numeric#step when no block is given returned Enumerator size when self, stop or step is a Float and step is positive returns 1 if step is Float::INFINITY"
  fails "Numeric#step when no block is given returned Enumerator size when self, stop or step is a Float and step is positive returns the difference between self and stop divided by the number of steps"
  fails "Numeric#step with [stop, step] decrements self using #+ until self < stop when step < 0"
  fails "Numeric#step with [stop, step] increments self using #+ until self > stop when step > 0"
end
